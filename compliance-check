#!/usr/bin/env bash

# This scripts purpose is to gather details about compliance posture.
# READ ONLY - THIS SCRIPT DOES NOT MODIFY ANY SETTINGS during evidence collection.

# enable/disable debugging
debug=0

if [[ 
  ${BASH_VERSINFO[0]} -lt 4 || 
  ( ${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -lt 1 ) 
]]; then 
  echo "This script requires bash version 4.1 or later to run." >&2
  exit 1
fi

if [[ $EUID -ne 0 ]]; then
  echo "Portions of this script may not work without root. Continuing..." >&2
fi

# use an associative array to build information about the host
declare -A compliance_details

compliance_details[report_date]+=$(date)

get_distro() {

  # source the OS details
  source /etc/os-release

  compliance_details[distro_id]+=$ID
  compliance_details[distro_ver]+=$VERSION_ID
}

check_disabled_users() {
  NL=$'\n'
  disabled_user_check=(
    root
    ubuntu
    centos
    ec2
  )

  for u in "${disabled_user_check[@]}"; do
    compliance_details[disabled_user_check]+="${u}: $(passwd -S "${u}" 2>&1)${NL}"
  done
}

# this function will gather details about the base OS and services
get_compliance_details() {

  # distro-agnostic details
  compliance_details[init_subsystem]+=$(ps --no-headers -o comm 1)
  compliance_details[kernel_version]+=$(uname -r)
  compliance_details[hostname]+=$(hostname)
  compliance_details[running_processes]+=$(ps -aux)
  compliance_details[listening_ports]+=$(ss -lntu | grep LISTEN)
  compliance_details[admin_users]+=$(cat /etc/group | grep -e wheel -e sudo | awk -F ":" '{print $4}' | sed 's/,/ /g')
  compliance_details[elevated_users]+=$(cat /etc/passwd |cut -d ':' -f1,3,4 | grep 0:0 | grep -v root | cut -d ':' -f1)

  check_disabled_users

  # distro-specific discovery
  if [[ ${compliance_details[distro_id]} == "centos" ]]; then
    compliance_details[installed_packages]+=$(rpm -qa)
    compliance_details[distro_full]+=$(cat /etc/redhat-release)
  elif [[ ${compliance_details[distro_id]} == "ubuntu" ]]; then
    compliance_details[installed_packages]+=$(dpkg -l)
    compliance_details[distro_full]+=$(lsb_release -a)
  fi

  # TODO: support non-systemd subsystems
  if [[ ${compliance_details[init_subsystem]} == "systemd" ]]; then
    compliance_details[enabled_services]+="$(systemctl list-unit-files --state=enabled --no-legend)"
    compliance_details[active_services]+="$(systemctl list-units --type service --no-legend)"

    if [[ $(echo "${compliance_details[active_services]}" | grep "^threatstack.service" | grep -c "running") -gt 0 ]]; then
      compliance_details[threatstack_present]+="Yes"
    else
      compliance_details[threatstack_present]+="No"
    fi

    if [[ $(echo "${compliance_details[active_services]}" | grep "^salt-minion.service" | grep -c "running") -gt 0 ]]; then
      compliance_details[salt_present]+="Yes"
    else
      compliance_details[salt_present]+="No"
    fi

  fi

  # determine what time daemon is being used and collect the configured time servers
  if [[ -f /etc/chrony.conf ]]; then
    compliance_details[time_daemon]+="chrony"
    compliance_details[time_sources]+=$(cat /etc/chrony.conf | grep ^server)
  elif [[ -f /etc/ntp.conf ]]; then
    compliance_details[time_daemon]+="ntpd"
    compliance_details[time_sources]+=$(cat /etc/ntp.conf | grep ^server)
  else
    compliance_details[time_daemon]+="unknown"
    compliance_details[time_sources]+="unknown"
  fi

  # TODO:
  #   * get oldest systemlog timestamp
  #   * get password settings
  #   * check for remote syslog configuration
}

print_debug_info() {

  for detail in "${!compliance_details[@]}";
  do
      # squelch package list debug output
      if [[ $detail != "installed_packages" ]]; then
        echo "$detail=${compliance_details[$detail]}"
      fi
  done
}


declare -a report_headers
report_headers=(
  report_date hostname distro_id distro_full
  admin_users elevated_users disabled_user_check
  kernel_version
  init_subsystem enabled_services active_services
  threatstack_present salt_present
  installed_packages running_processes listening_ports
  time_daemon time_sources
)

json_escape () {
    printf '%s' "$1" | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))'
}

generate_json() {
  echo '{'
  for col in "${report_headers[@]}"; do
    printf '"%s": %s' "${col}" "$(json_escape "${compliance_details[${col}]}")"
    if [[ "$col" != "${report_headers[${#report_headers[@]}-1]}" ]]; then
      echo ','
    else
      echo ''
    fi
  done
  echo '}'
}

generate_text_report() {
  for col in "${report_headers[@]}"; do
    echo "%%%--- ${col}:"
    echo "${compliance_details[${col}]}"
  done
}

main() {

  get_distro
  get_compliance_details
  generate_text_report

  if [[ $debug == 1 ]]; then
    print_debug_info
  fi
}

main
